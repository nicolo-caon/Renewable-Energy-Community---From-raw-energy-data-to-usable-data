# After previous script we should have two folders, one for "Immessa", the other for "Prelevata". Each containina a single file for every solar plant
# I was asked to save it in excell. Converted to csv and uploaded.
# Now I will aggegate data from hourly to daily and should end up with the same charts elaborated from e-Distribuzione
# This is not a necessary step for the pourpose of the project but was requested by office big boss

# import libraries
from google.colab import files
import os
import glob
import pandas as pd
import plotly.graph_objects as go

# Loading all solar plants data, strting with "Immessa"
Immessa_path  = './CER_analisi_energetica/Power_data/Immessa_concatenated'

# Data should already be in the right format
# Dropping data before 06/03/2025 (dd-mm-yyyy) since our CER was not connected yet
cutoff_date = pd.to_datetime("06-03-2025", format="%d-%m-%Y")

# Get all CSV files inside Immessa_concatenated
csv_files = glob.glob(os.path.join(Immessa_path, "*.csv"))

# List to store data for all plants
all_data = []

for file in csv_files:
    # Read CSV
    df = pd.read_csv(file)
    date_col = df.columns[0]

    # Convert and filter
    df[date_col] = pd.to_datetime(df[date_col], format="%d/%m/%Y", errors="coerce")
    df = df[df[date_col] >= cutoff_date].copy()

    # Sum hourly columns
    df['Immessa'] = df.iloc[:, 1:].sum(axis=1)
    df = df[[date_col, 'Immessa']]

    # Resample daily to ensure no missing dates
    df = df.set_index(date_col).resample('D').sum().reset_index()

    # Extract plant name from file name ("rossi" from "rossi_immessa_*.csv")
    plant_name = os.path.basename(file).split("_")[0].capitalize()
    df['Plant'] = plant_name

    all_data.append(df)

# Combine all plants
combined_df = pd.concat(all_data, ignore_index=True)

# Sort by date
combined_df = combined_df.sort_values(by=date_col)

# Create interactive plot for "Immessa". One line for each solar plant, using aggregated daily data
fig = go.Figure()

for plant in combined_df['Plant'].unique():
    plant_data = combined_df[combined_df['Plant'] == plant]
    fig.add_trace(go.Scatter(
        x=plant_data[date_col],
        y=plant_data['Immessa'],
        mode='lines+markers',
        name=plant
    ))

fig.update_layout(
    title="ðŸ“ˆ Daily Energy 'Immessa' (plant to grid) per Plant",
    xaxis_title="Date",
    yaxis_title="Energy (kWh)",
    hovermode="x unified",
    template="plotly_white",
    legend_title_text="Plant",
    width=950,
    height=600
)

fig.show()

# Repeating process with "Prelevata"
# Loading all solar plants data, strting with "Prelevata"
Prelevata_path  = './CER_analisi_energetica/Power_data/Prelevata_concatenated'

# Dropping data before 06/03/2025
cutoff_date = pd.to_datetime("06-03-2025", format="%d-%m-%Y")

# Get all CSV files inside Prelevata_concatenated
csv_files = glob.glob(os.path.join(Prelevata_path, "*.csv"))

# List to store data for all plants
all_data = []

for file in csv_files:
    # Read CSV
    df = pd.read_csv(file)
    date_col = df.columns[0]

    # Convert and filter
    df[date_col] = pd.to_datetime(df[date_col], format="%d/%m/%Y", errors="coerce")
    df = df.dropna(subset=[date_col])
    df = df[df[date_col] >= cutoff_date].copy()

    # Sum hourly columns
    df['Prelevata'] = df.iloc[:, 1:].sum(axis=1)
    df = df[[date_col, 'Prelevata']]

    # Resample daily to ensure no missing dates
    df = df.set_index(date_col).resample('D').sum().reset_index()

    # Extract plant name from file name ("rossi" from "rossi_prelevata_*.csv")
    plant_name = os.path.basename(file).split("_")[0].capitalize()
    df['Plant'] = plant_name

    all_data.append(df)

# Combine all plants
combined_df = pd.concat(all_data, ignore_index=True)

# Sort by date
combined_df = combined_df.sort_values(by=date_col)

# Create interactive plot
fig = go.Figure()

for plant in combined_df['Plant'].unique():
    plant_data = combined_df[combined_df['Plant'] == plant]
    fig.add_trace(go.Scatter(
        x=plant_data[date_col],
        y=plant_data['Prelevata'],
        mode='lines+markers',
        name=plant
    ))

fig.update_layout(
    title="ðŸ“ˆ Daily Energy 'Prelevata' (Grid to plant) per Plant",
    xaxis_title="Date",
    yaxis_title="Energy (Wh)",
    hovermode="x unified",
    template="plotly_white",
    legend_title_text="Plant",
    width=950,
    height=600
)

fig.show()
